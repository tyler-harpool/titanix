name: Automatic Release

on:
  push:
    branches:
      - main
    paths:
      - "Cargo.toml" # Only trigger when version might have changed
  workflow_dispatch:
    inputs:
      version:
        description: "Version to create release for (without v prefix)"
        required: true
        default: "0.1.0"

permissions:
  contents: write

jobs:
  prepare-release:
    name: Check Version and Create Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history to check tags
          # IMPORTANT: Use a personal access token with workflow scope
          # This allows the tag push to trigger other workflows
          token: ${{ secrets.PAT_TOKEN }}

      # For automatic triggers from Cargo.toml changes
      - name: Check version from Cargo.toml
        id: get-version-from-cargo
        if: github.event_name == 'push'
        run: |
          VERSION=$(grep '^version = ' Cargo.toml | head -n 1 | sed 's/version = "\(.*\)"/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Using version from Cargo.toml: $VERSION"

      # For manual triggers
      - name: Get version from input
        id: get-version-from-input
        if: github.event_name == 'workflow_dispatch'
        run: |
          VERSION=${{ github.event.inputs.version }}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Using version from input: $VERSION"

      # Set unified version
      - name: Set version
        id: get-version
        run: |
          if [ "${{ github.event_name }}" == "push" ]; then
            VERSION="${{ steps.get-version-from-cargo.outputs.version }}"
          else
            VERSION="${{ steps.get-version-from-input.outputs.version }}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Using version: $VERSION"

      # Check if tag already exists
      - name: Check if tag exists
        id: check-tag
        run: |
          VERSION="${{ steps.get-version.outputs.version }}"
          if git ls-remote --tags origin | grep -q "refs/tags/v$VERSION$"; then
            echo "Tag v$VERSION already exists, skipping release"
            echo "should_release=false" >> $GITHUB_OUTPUT
          else
            echo "Version v$VERSION needs to be released"
            echo "should_release=true" >> $GITHUB_OUTPUT
          fi

      # Create and push tag with PAT token to trigger workflows
      - name: Create and push tag
        if: steps.check-tag.outputs.should_release == 'true'
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
          VERSION="${{ steps.get-version.outputs.version }}"
          
          echo "Creating tag v$VERSION"
          git tag -a "v$VERSION" -m "Release v$VERSION"
          git push origin "v$VERSION"
          
          echo "Tag v$VERSION pushed. This should trigger the release workflows."

  # Fallback method to manually trigger workflows if needed
  manual-trigger:
    name: Manually Trigger Workflows (Fallback)
    needs: prepare-release
    runs-on: ubuntu-latest
    if: always() && !cancelled()
    steps:
      - name: Install GitHub CLI
        run: |
          type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
              && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
              && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
              && sudo apt update \
              && sudo apt install gh -y

      - name: Manually Trigger Release Workflows
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          VERSION="${{ needs.prepare-release.outputs.version }}"
          echo "Manually triggering release workflows for v$VERSION"
          
          # Trigger workflows using GitHub CLI
          gh workflow run release-unix.yml --ref v$VERSION || echo "Could not trigger Unix workflow"
          gh workflow run release-windows.yml --ref v$VERSION || echo "Could not trigger Windows workflow"
          
          echo "Release workflows have been manually triggered for v$VERSION"